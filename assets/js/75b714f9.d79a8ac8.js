"use strict";(self.webpackChunkchaos_mesh_website=self.webpackChunkchaos_mesh_website||[]).push([[9002],{2255:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"new_platform/index","title":"Adding and Adapting Platforms","description":"Introduction","source":"@site/docs/new_platform/index.md","sourceDirName":"new_platform","slug":"/new_platform/","permalink":"/docs/new_platform/","draft":false,"unlisted":false,"editUrl":"https://github.com/tuya/TuyaOpen/edit/master/docs/new_platform/index.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Quick Start","permalink":"/docs/quick_start/"},"next":{"title":"index","permalink":"/docs/new_board/"}}');var r=t(4848),a=t(8453);const i={},s="Adding and Adapting Platforms",l={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Platform Adaptation",id:"platform-adaptation",level:2},{value:"Generate New Platform Directory",id:"generate-new-platform-directory",level:3},{value:"Completing Adaptation",id:"completing-adaptation",level:2},{value:"Kconfig Configuration",id:"kconfig-configuration",level:3}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"adding-and-adapting-platforms",children:"Adding and Adapting Platforms"})}),"\n",(0,r.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://github.com/tuya/TuyaOpen",children:"TuyaOpen"})," manages platforms using the ",(0,r.jsx)(n.code,{children:"platform_config.yaml"})," file. The ",(0,r.jsx)(n.code,{children:"platform/platform_config.yaml"})," file contains repository information of platforms that have implemented common interfaces. Configure ",(0,r.jsx)(n.code,{children:"platform"})," and ",(0,r.jsx)(n.code,{children:"chip"})," (if the platform supports multiple chips) in the project's ",(0,r.jsx)(n.code,{children:"project_build.ini"})," file. After running tos compilation, the target platform will automatically download the corresponding platform repository and link it to the ",(0,r.jsx)(n.code,{children:"TuyaOpen"})," project."]}),"\n",(0,r.jsxs)(n.p,{children:["If you wish to port ",(0,r.jsx)(n.code,{children:"TuyaOpen"})," to your own chip, platform adaptation is required."]}),"\n",(0,r.jsx)(n.h2,{id:"platform-adaptation",children:"Platform Adaptation"}),"\n",(0,r.jsx)(n.h3,{id:"generate-new-platform-directory",children:"Generate New Platform Directory"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Download and enter the ",(0,r.jsx)(n.code,{children:"TuyaOpen"})," directory, then set environment variables:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"$ cd TuyaOpen\n$ export PATH=$PATH:$PWD\n"})}),"\n",(0,r.jsx)(n.p,{children:"Or add the TuyaOpen path to your system environment variables."}),"\n",(0,r.jsx)(n.p,{children:"TuyaOpen uses the tos command for compilation and debugging operations. The tos command locates the TuyaOpen repository through the path set in environment variables."}),"\n",(0,r.jsxs)(n.p,{children:["For detailed usage of the tos command, refer to ",(0,r.jsx)(n.a,{href:"../tos_guide/index.md",children:"tos Guide"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Generate a new platform subdirectory:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"$ tos new_platform <new-platform-name>\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This command will automatically launch a ",(0,r.jsx)(n.code,{children:"menuconfig"})," dialog during platform creation:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"$ tos new_platform <new-platform-name>\n(1.0.0) PROJECT_VERSION (NEW)\n    configure TuyaOpen  ---\x3e\n        configure tuya cloud service  ---\x3e\n        configure enable/disable liblwip  ---\x3e\n        configure enable/disable libtflm  ---\x3e\n        configure mbedtls  ---\x3e\n        configure system parameter  ---\x3e\n    configure board <your-board-name>  ---\x3e\n        OPERATING_SYSTEM (RTOS)  ---\x3e\n        ENDIAN (LITTLE_ENDIAN)  ---\x3e\n        [ ] ENABLE_FILE_SYSTEM --- support filesystem (NEW)\n        [ ] ENABLE_WIFI --- support wifi (NEW)\n        [*] ENABLE_WIRED --- support wired (NEW)\n        [ ] ENABLE_BLUETOOTH --- support BLE (NEW)  ----\n        [ ] ENABLE_RTC --- support rtc (NEW)\n        [ ] ENABLE_WATCHDOG --- support watchdog (NEW)\n        [*] ENABLE_UART --- support uart (NEW)\n        [*] ENABLE_FLASH --- support flash (NEW)  ---\x3e\n        [ ] ENABLE_ADC --- support adc (NEW)\n        [ ] ENABLE_PWM --- support pwm (NEW)\n        [*] ENABLE_GPIO --- support gpio (NEW)\n        [ ] ENABLE_I2C --- support i2c (NEW)\n        [ ] ENABLE_SPI --- support spi (NEW)\n        [ ] ENABLE_TIMER --- support hw timer (NEW)\n        [ ] ENABLE_DISPLAY --- support GUI display (NEW)\n        [ ] ENABLE_MEDIA --- support media (NEW)\n        [ ] ENABLE_PM --- support power manager (NEW)\n        [ ] ENABLE_STORAGE --- support storage such as SDCard (NEW)\n        [ ] ENABLE_DAC --- support dac (NEW)\n        [ ] ENABLE_I2S --- support i2s (NEW)\n        [ ] ENABLE_WAKEUP --- support lowpower wakeup (NEW)\n        [ ] ENABLE_REGISTER --- support register (NEW)\n        [ ] ENABLE_PINMUX --- support pinmux (NEW)\n        [ ] ENABLE_PLATFORM_AES --- support hw AES (NEW)\n        [ ] ENABLE_PLATFORM_SHA256 --- support hw sha256 (NEW)\n        [ ] ENABLE_PLATFORM_MD5 --- support hw md5 (NEW)\n        [ ] ENABLE_PLATFORM_SHA1 --- support hw sha1 (NEW)\n        [ ] ENABLE_PLATFORM_RSA --- support hw rsa (NEW)\n        [ ] ENABLE_PLATFORM_ECC --- support hw ecc (NEW)\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Configure default software features in ",(0,r.jsx)(n.code,{children:"TuyaOpen"})," based on new platform capabilities"]}),"\n",(0,r.jsxs)(n.li,{children:["Configure default hardware features in ",(0,r.jsx)(n.code,{children:"configure board <your-board-name>"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["After configuration, save changes (shortcut ",(0,r.jsx)(n.code,{children:"S"}),") and exit (shortcut ",(0,r.jsx)(n.code,{children:"Q"}),") to generate the default configuration ",(0,r.jsx)(n.code,{children:"default.config"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"tos new_platform"})," command generates the new platform directory and creates TKL interface layer code based on menuconfig selections."]}),"\n",(0,r.jsx)(n.p,{children:"Log output during generation:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"..............\n    make ability: system\n        new file: tkl_sleep.c\n        new file: tkl_memory.c\n        new file: tkl_output.c\n        new file: tkl_semaphore.c\n        new file: tkl_queue.c\n        new file: tkl_system.c\n        new file: tkl_fs.c\n        new file: tkl_ota.c\n        new file: tkl_thread.c\n        new file: tkl_mutex.c\n    make ability: uart\n        new file: tkl_uart.c\n    make ability: security\ngenerate code finished!\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The message ",(0,r.jsx)(n.code,{children:"generate code finished!"})," indicates successful template generation."]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note"}),": Log details may vary slightly depending on configuration options."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"The generated directory structure:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"- platform\n    + t2\n    + ubuntu\n    - <new-platform-name>\n        + <new-platform-sdk>       # Create manually for chip SDK\n        + toolchain                # Create manually for toolchain\n        + tuyaos                   # TuyaOS adaptation layer\n            - tuyaos_adapter       # Interface source code\n                - include\n                - src\n        - Kconfig                   # Configurable items\n        - default.config            # Default platform configuration\n        - platform_config.cmake     # Adaptation layer paths\n        - toolchain_file.cmake      # Compilation tool paths\n        - build_example.sh          # Build script\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"completing-adaptation",children:"Completing Adaptation"}),"\n",(0,r.jsx)(n.h3,{id:"kconfig-configuration",children:"Kconfig Configuration"}),"\n",(0,r.jsxs)(n.p,{children:["Modify the ",(0,r.jsx)(n.code,{children:"<your-board-name>"})," in Kconfig to match your platform name:"]})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>s});var o=t(6540);const r={},a=o.createContext(r);function i(e){const n=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);