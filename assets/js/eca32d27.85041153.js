"use strict";(self.webpackChunkchaos_mesh_website=self.webpackChunkchaos_mesh_website||[]).push([[5048],{4542:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>o,frontMatter:()=>s,metadata:()=>l,toc:()=>d});const l=JSON.parse('{"id":"tkl-api/tkl_mutex","title":"Mutex","description":"The file tkl_mutex.c is used for creating and managing mutexes in embedded systems or multitasking operating systems to ensure synchronized access to resources. The functions defined in the file can create mutexes, lock them, attempt to lock them, unlock them, and destroy them. This file is automatically generated by the TuyaOS and allows developers to add or modify code implementations in specified areas.","source":"@site/docs/tkl-api/tkl_mutex.md","sourceDirName":"tkl-api","slug":"/tkl-api/tkl_mutex","permalink":"/website/docs/tkl-api/tkl_mutex","draft":false,"unlisted":false,"editUrl":"https://github.com/tuya/TuyaOpen/edit/master/docs/tkl-api/tkl_mutex.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"LWIP","permalink":"/website/docs/tkl-api/tkl_lwip"},"next":{"title":"Network","permalink":"/website/docs/tkl-api/tkl_network"}}');var r=n(4848),i=n(8453);const s={},a="Mutex",c={},d=[{value:"API Description",id:"api-description",level:2},{value:"tkl_mutex_create_init",id:"tkl_mutex_create_init",level:3},{value:"Function",id:"function",level:4},{value:"Parameters",id:"parameters",level:4},{value:"Return Value",id:"return-value",level:4},{value:"tkl_mutex_lock",id:"tkl_mutex_lock",level:3},{value:"Function",id:"function-1",level:4},{value:"Parameters",id:"parameters-1",level:4},{value:"Return Value",id:"return-value-1",level:4},{value:"tkl_mutex_trylock",id:"tkl_mutex_trylock",level:3},{value:"Function",id:"function-2",level:4},{value:"Parameters",id:"parameters-2",level:4},{value:"Return Value",id:"return-value-2",level:4},{value:"tkl_mutex_unlock",id:"tkl_mutex_unlock",level:3},{value:"Function",id:"function-3",level:4},{value:"Parameters",id:"parameters-3",level:4},{value:"Return Value",id:"return-value-3",level:4},{value:"tkl_mutex_release",id:"tkl_mutex_release",level:3},{value:"Function",id:"function-4",level:4},{value:"Parameters",id:"parameters-4",level:4},{value:"Return Value",id:"return-value-4",level:4}];function u(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"mutex",children:"Mutex"})}),"\n",(0,r.jsxs)(t.p,{children:["The file ",(0,r.jsx)(t.code,{children:"tkl_mutex.c"})," is used for creating and managing mutexes in embedded systems or multitasking operating systems to ensure synchronized access to resources. The functions defined in the file can create mutexes, lock them, attempt to lock them, unlock them, and destroy them. This file is automatically generated by the TuyaOS and allows developers to add or modify code implementations in specified areas."]}),"\n",(0,r.jsx)(t.h2,{id:"api-description",children:"API Description"}),"\n",(0,r.jsx)(t.h3,{id:"tkl_mutex_create_init",children:"tkl_mutex_create_init"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-c",children:"OPERATE_RET tkl_mutex_create_init(TKL_MUTEX_HANDLE *handle);\n"})}),"\n",(0,r.jsx)(t.h4,{id:"function",children:"Function"}),"\n",(0,r.jsx)(t.p,{children:"Creates and initializes a mutex."}),"\n",(0,r.jsx)(t.h4,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"handle"}),": Output parameter used to store the handle of the created mutex."]}),"\n"]}),"\n",(0,r.jsx)(t.h4,{id:"return-value",children:"Return Value"}),"\n",(0,r.jsxs)(t.p,{children:["A return value of ",(0,r.jsx)(t.code,{children:"OPRT_OK"})," indicates that the mutex was successfully created, while other values indicate an error. Refer to ",(0,r.jsx)(t.code,{children:"tuya_error_code.h"})," for specific error codes."]}),"\n",(0,r.jsx)(t.h3,{id:"tkl_mutex_lock",children:"tkl_mutex_lock"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-c",children:"OPERATE_RET tkl_mutex_lock(const TKL_MUTEX_HANDLE handle);\n"})}),"\n",(0,r.jsx)(t.h4,{id:"function-1",children:"Function"}),"\n",(0,r.jsx)(t.p,{children:"Locks a mutex. If the mutex is already locked by another task, the task calling this function will be suspended until the mutex becomes available."}),"\n",(0,r.jsx)(t.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"handle"}),": Input parameter, the handle of the mutex."]}),"\n"]}),"\n",(0,r.jsx)(t.h4,{id:"return-value-1",children:"Return Value"}),"\n",(0,r.jsxs)(t.p,{children:["A return value of ",(0,r.jsx)(t.code,{children:"OPRT_OK"})," indicates that the mutex was successfully locked, while failure returns the corresponding error code. Refer to ",(0,r.jsx)(t.code,{children:"tuya_error_code.h"})," for detailed information."]}),"\n",(0,r.jsx)(t.h3,{id:"tkl_mutex_trylock",children:"tkl_mutex_trylock"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-c",children:"OPERATE_RET tkl_mutex_trylock(const TKL_MUTEX_HANDLE mutexHandle);\n"})}),"\n",(0,r.jsx)(t.h4,{id:"function-2",children:"Function"}),"\n",(0,r.jsx)(t.p,{children:"Attempts to lock a mutex without suspending the calling task if the mutex is occupied."}),"\n",(0,r.jsx)(t.h4,{id:"parameters-2",children:"Parameters"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"mutexHandle"}),": Input parameter, the handle of the mutex."]}),"\n"]}),"\n",(0,r.jsx)(t.h4,{id:"return-value-2",children:"Return Value"}),"\n",(0,r.jsxs)(t.p,{children:["A return value of ",(0,r.jsx)(t.code,{children:"OPRT_OK"})," indicates that the mutex was successfully attempted to be locked, while error values indicate an error. Refer to ",(0,r.jsx)(t.code,{children:"tuya_error_code.h"})," for specific error codes."]}),"\n",(0,r.jsx)(t.h3,{id:"tkl_mutex_unlock",children:"tkl_mutex_unlock"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-c",children:"OPERATE_RET tkl_mutex_unlock(const TKL_MUTEX_HANDLE handle);\n"})}),"\n",(0,r.jsx)(t.h4,{id:"function-3",children:"Function"}),"\n",(0,r.jsx)(t.p,{children:"Unlocks a locked mutex."}),"\n",(0,r.jsx)(t.h4,{id:"parameters-3",children:"Parameters"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"handle"}),": Input parameter, the handle of the mutex."]}),"\n"]}),"\n",(0,r.jsx)(t.h4,{id:"return-value-3",children:"Return Value"}),"\n",(0,r.jsxs)(t.p,{children:["A return value of ",(0,r.jsx)(t.code,{children:"OPRT_OK"})," indicates that the mutex was successfully unlocked, while other values indicate an error. Refer to ",(0,r.jsx)(t.code,{children:"tuya_error_code.h"})," for detailed information."]}),"\n",(0,r.jsx)(t.h3,{id:"tkl_mutex_release",children:"tkl_mutex_release"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-c",children:"OPERATE_RET tkl_mutex_release(const TKL_MUTEX_HANDLE handle);\n"})}),"\n",(0,r.jsx)(t.h4,{id:"function-4",children:"Function"}),"\n",(0,r.jsx)(t.p,{children:"Releases and deletes a mutex."}),"\n",(0,r.jsx)(t.h4,{id:"parameters-4",children:"Parameters"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"handle"}),": Input parameter, the handle of the mutex."]}),"\n"]}),"\n",(0,r.jsx)(t.h4,{id:"return-value-4",children:"Return Value"}),"\n",(0,r.jsxs)(t.p,{children:["A return value of ",(0,r.jsx)(t.code,{children:"OPRT_OK"})," indicates that the resources were successfully released, while other values indicate an error. Refer to ",(0,r.jsx)(t.code,{children:"tuya_error_code.h"})," for error information."]})]})}function o(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>a});var l=n(6540);const r={},i=l.createContext(r);function s(e){const t=l.useContext(i);return l.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),l.createElement(i.Provider,{value:t},e.children)}}}]);