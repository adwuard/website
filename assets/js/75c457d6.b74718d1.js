"use strict";(self.webpackChunkchaos_mesh_website=self.webpackChunkchaos_mesh_website||[]).push([[2900],{5809:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"tkl-api/tkl_semaphore","title":"Semaphore","description":"The file tkl_semaphore.c is used for creating and managing semaphores to implement task synchronization or event notification between tasks in embedded systems or multi-tasking operating systems. This file provides interfaces for creating semaphores, waiting on semaphores, posting to semaphores, and releasing semaphores. The file is also auto-generated by the TuyaOS and reserves areas for developers to implement their code.","source":"@site/docs/tkl-api/tkl_semaphore.md","sourceDirName":"tkl-api","slug":"/tkl-api/tkl_semaphore","permalink":"/website/docs/tkl-api/tkl_semaphore","draft":false,"unlisted":false,"editUrl":"https://github.com/tuya/TuyaOpen/edit/master/docs/tkl-api/tkl_semaphore.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"RTC Driver","permalink":"/website/docs/tkl-api/tkl_rtc"},"next":{"title":"SPI Driver","permalink":"/website/docs/tkl-api/tkl_spi"}}');var t=n(4848),i=n(8453);const a={},l="Semaphore",o={},c=[{value:"API Description",id:"api-description",level:2},{value:"tkl_semaphore_create_init",id:"tkl_semaphore_create_init",level:3},{value:"Function",id:"function",level:4},{value:"Parameters",id:"parameters",level:4},{value:"Return Value",id:"return-value",level:4},{value:"tkl_semaphore_wait",id:"tkl_semaphore_wait",level:3},{value:"Function",id:"function-1",level:4},{value:"Parameters",id:"parameters-1",level:4},{value:"Return Value",id:"return-value-1",level:4},{value:"tkl_semaphore_post",id:"tkl_semaphore_post",level:3},{value:"Function",id:"function-2",level:4},{value:"Parameters",id:"parameters-2",level:4},{value:"Return Value",id:"return-value-2",level:4},{value:"tkl_semaphore_release",id:"tkl_semaphore_release",level:3},{value:"Function",id:"function-3",level:4},{value:"Parameters",id:"parameters-3",level:4},{value:"Return Value",id:"return-value-3",level:4}];function d(e){const r={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"semaphore",children:"Semaphore"})}),"\n",(0,t.jsxs)(r.p,{children:["The file ",(0,t.jsx)(r.code,{children:"tkl_semaphore.c"})," is used for creating and managing semaphores to implement task synchronization or event notification between tasks in embedded systems or multi-tasking operating systems. This file provides interfaces for creating semaphores, waiting on semaphores, posting to semaphores, and releasing semaphores. The file is also auto-generated by the TuyaOS and reserves areas for developers to implement their code."]}),"\n",(0,t.jsx)(r.h2,{id:"api-description",children:"API Description"}),"\n",(0,t.jsx)(r.h3,{id:"tkl_semaphore_create_init",children:"tkl_semaphore_create_init"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-c",children:"OPERATE_RET tkl_semaphore_create_init(TKL_SEM_HANDLE *handle, uint32_t sem_cnt, uint32_t sem_max);\n"})}),"\n",(0,t.jsx)(r.h4,{id:"function",children:"Function"}),"\n",(0,t.jsx)(r.p,{children:"Create and initialize a counting semaphore."}),"\n",(0,t.jsx)(r.h4,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"handle"}),": Output parameter to receive the created semaphore handle."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"sem_cnt"}),": The initial count of the semaphore."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"sem_max"}),": The maximum count of the semaphore."]}),"\n"]}),"\n",(0,t.jsx)(r.h4,{id:"return-value",children:"Return Value"}),"\n",(0,t.jsxs)(r.p,{children:["A return value of ",(0,t.jsx)(r.code,{children:"OPRT_OK"})," indicates that the semaphore was successfully created, other return values indicate an error. See ",(0,t.jsx)(r.code,{children:"tuya_error_code.h"})," for specific error codes."]}),"\n",(0,t.jsx)(r.h3,{id:"tkl_semaphore_wait",children:"tkl_semaphore_wait"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-c",children:"OPERATE_RET tkl_semaphore_wait(const TKL_SEM_HANDLE handle, uint32_t timeout);\n"})}),"\n",(0,t.jsx)(r.h4,{id:"function-1",children:"Function"}),"\n",(0,t.jsx)(r.p,{children:"Wait for a semaphore."}),"\n",(0,t.jsx)(r.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"handle"}),": Semaphore handle."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"timeout"}),": Timeout duration for waiting, in milliseconds. ",(0,t.jsx)(r.code,{children:"TKL_SEM_WAIT_FOREVER"})," indicates to wait indefinitely until the semaphore is obtained."]}),"\n"]}),"\n",(0,t.jsx)(r.h4,{id:"return-value-1",children:"Return Value"}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"OPRT_OK"})," indicates that the semaphore was successfully obtained, ",(0,t.jsx)(r.code,{children:"OPRT_OS_ADAPTER_SEM_WAIT_TIMEOUT"})," indicates a timeout occurred, other return values indicate an error. See ",(0,t.jsx)(r.code,{children:"tuya_error_code.h"})," for specific error codes."]}),"\n",(0,t.jsx)(r.h3,{id:"tkl_semaphore_post",children:"tkl_semaphore_post"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-c",children:"OPERATE_RET tkl_semaphore_post(const TKL_SEM_HANDLE handle);\n"})}),"\n",(0,t.jsx)(r.h4,{id:"function-2",children:"Function"}),"\n",(0,t.jsx)(r.p,{children:"Post (release) a semaphore, incrementing the semaphore's count."}),"\n",(0,t.jsx)(r.h4,{id:"parameters-2",children:"Parameters"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"handle"}),": Semaphore handle."]}),"\n"]}),"\n",(0,t.jsx)(r.h4,{id:"return-value-2",children:"Return Value"}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"OPRT_OK"})," indicates that the semaphore was successfully posted, other return values indicate an error. Detailed error codes can be queried in ",(0,t.jsx)(r.code,{children:"tuya_error_code.h"}),"."]}),"\n",(0,t.jsx)(r.h3,{id:"tkl_semaphore_release",children:"tkl_semaphore_release"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-c",children:"OPERATE_RET tkl_semaphore_release(const TKL_SEM_HANDLE handle);\n"})}),"\n",(0,t.jsx)(r.h4,{id:"function-3",children:"Function"}),"\n",(0,t.jsx)(r.p,{children:"Release and delete a semaphore."}),"\n",(0,t.jsx)(r.h4,{id:"parameters-3",children:"Parameters"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"handle"}),": Semaphore handle."]}),"\n"]}),"\n",(0,t.jsx)(r.h4,{id:"return-value-3",children:"Return Value"}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"OPRT_OK"})," indicates that the resources were successfully released, other return values indicate an error. Detailed information can be obtained from ",(0,t.jsx)(r.code,{children:"tuya_error_code.h"}),"."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{})})]})}function h(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>l});var s=n(6540);const t={},i=s.createContext(t);function a(e){const r=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(i.Provider,{value:r},e.children)}}}]);