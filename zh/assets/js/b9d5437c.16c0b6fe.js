"use strict";(self.webpackChunkchaos_mesh_website=self.webpackChunkchaos_mesh_website||[]).push([[8992],{3162:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>u,frontMatter:()=>l,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"tkl-api/tkl_ota","title":"OTA","description":"The tkl_ota.c firmware OTA (Over-The-Air) includes handling various stages of the firmware upgrade process: obtaining firmware upgrade capabilities, OTA start notification, OTA data processing, and OTA end notification. This file is automatically generated by the TuyaOS and allows developers to add their own implementations in the provided user-defined areas.","source":"@site/i18n/zh/docusaurus-plugin-content-docs/current/tkl-api/tkl_ota.md","sourceDirName":"tkl-api","slug":"/tkl-api/tkl_ota","permalink":"/website/zh/docs/tkl-api/tkl_ota","draft":false,"unlisted":false,"editUrl":"https://github.com/tuya/TuyaOpen/edit/master/i18n/zh/docusaurus-plugin-content-docs/current/tkl-api/tkl_ota.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Network","permalink":"/website/zh/docs/tkl-api/tkl_network"},"next":{"title":"Log Output","permalink":"/website/zh/docs/tkl-api/tkl_output"}}');var r=i(4848),a=i(8453);const l={},s="OTA",o={},d=[{value:"API Description",id:"api-description",level:2},{value:"tkl_ota_get_ability",id:"tkl_ota_get_ability",level:3},{value:"Functionality",id:"functionality",level:4},{value:"Parameters",id:"parameters",level:4},{value:"Return Value",id:"return-value",level:4},{value:"tkl_ota_start_notify",id:"tkl_ota_start_notify",level:3},{value:"Functionality",id:"functionality-1",level:4},{value:"Parameters",id:"parameters-1",level:4},{value:"Return Value",id:"return-value-1",level:4},{value:"tkl_ota_data_process",id:"tkl_ota_data_process",level:3},{value:"Functionality",id:"functionality-2",level:4},{value:"Parameters",id:"parameters-2",level:4},{value:"Return Value",id:"return-value-2",level:4},{value:"tkl_ota_end_notify",id:"tkl_ota_end_notify",level:3},{value:"Functionality",id:"functionality-3",level:4},{value:"Parameters",id:"parameters-3",level:4},{value:"Return Value",id:"return-value-3",level:4},{value:"tkl_ota_get_old_firmware_info",id:"tkl_ota_get_old_firmware_info",level:3},{value:"Functionality",id:"functionality-4",level:4},{value:"Parameters",id:"parameters-4",level:4},{value:"Return Value",id:"return-value-4",level:4}];function c(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"ota",children:"OTA"})}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"tkl_ota.c"})," firmware OTA (Over-The-Air) includes handling various stages of the firmware upgrade process: obtaining firmware upgrade capabilities, OTA start notification, OTA data processing, and OTA end notification. This file is automatically generated by the TuyaOS and allows developers to add their own implementations in the provided user-defined areas."]}),"\n",(0,r.jsx)(t.h2,{id:"api-description",children:"API Description"}),"\n",(0,r.jsx)(t.h3,{id:"tkl_ota_get_ability",children:"tkl_ota_get_ability"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-c",children:"OPERATE_RET tkl_ota_get_ability(uint32_t *image_size, TUYA_OTA_TYPE_E *type);\n"})}),"\n",(0,r.jsx)(t.h4,{id:"functionality",children:"Functionality"}),"\n",(0,r.jsx)(t.p,{children:"Obtains the OTA capability information of the current device, including the maximum firmware image size and the OTA type."}),"\n",(0,r.jsx)(t.h4,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"image_size"}),": Output parameter, used to store the maximum size of the firmware image."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"type"}),": Output parameter, OTA type, can be a full package or a differential package, use ",(0,r.jsx)(t.code,{children:"TUYA_OTA_FULL"})," to indicate a full package, and ",(0,r.jsx)(t.code,{children:"TUYA_OTA_DIFF"})," to indicate a differential package.","\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-c",children:"    typedef enum {\n        TUYA_OTA_FULL        = 1,            ///< AB area switch, full package upgrade\n        TUYA_OTA_DIFF        = 2,            ///< fixed area, difference package upgrade\n    } TUYA_OTA_TYPE_E;\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.h4,{id:"return-value",children:"Return Value"}),"\n",(0,r.jsxs)(t.p,{children:["A return value of ",(0,r.jsx)(t.code,{children:"OPRT_OK"})," indicates success, other values indicate an error, please refer to ",(0,r.jsx)(t.code,{children:"tuya_error_code.h"}),"."]}),"\n",(0,r.jsx)(t.h3,{id:"tkl_ota_start_notify",children:"tkl_ota_start_notify"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-c",children:"OPERATE_RET tkl_ota_start_notify(uint32_t image_size, TUYA_OTA_TYPE_E type, TUYA_OTA_PATH_E path);\n"})}),"\n",(0,r.jsx)(t.h4,{id:"functionality-1",children:"Functionality"}),"\n",(0,r.jsx)(t.p,{children:"Notifies the start of the OTA upgrade, this function initializes the necessary variables and states for the OTA process."}),"\n",(0,r.jsx)(t.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"image_size"}),": Input parameter, the size of the firmware image to be upgraded."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"type"}),": Input parameter, OTA type."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"path"}),": Input parameter, OTA path, the channel through which the data is transmitted.","\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-c",children:"    typedef enum {\n    TUYA_OTA_PATH_AIR    = 0,            ///< OTA from Wired/Wi-Fi/Cellular/NBIoT\n    TUYA_OTA_PATH_UART   = 1,            ///< OTA from uart for MF\n    TUYA_OTA_PATH_BLE    = 2,            ///< OTA from BLE protocol for subdev\n    TUYA_OTA_PATH_ZIGBEE = 3,            ///< OTA from Zigbee protocol for subdev\n    TUYA_OTA_PATH_SEC_A = 4,             ///< OTA from multi-section A\n    TUYA_OTA_PATH_SEC_B = 5,             ///< OTA from multi-section B\n    TUYA_OTA_PATH_INVALID = 255          ///< OTA from multi-section invalid\n    }TUYA_OTA_PATH_E;\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.h4,{id:"return-value-1",children:"Return Value"}),"\n",(0,r.jsxs)(t.p,{children:["A return value of ",(0,r.jsx)(t.code,{children:"OPRT_OK"})," indicates the operation was successful, other return values indicate an error, please refer to ",(0,r.jsx)(t.code,{children:"tuya_error_code.h"})," for error information."]}),"\n",(0,r.jsx)(t.h3,{id:"tkl_ota_data_process",children:"tkl_ota_data_process"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-c",children:"OPERATE_RET tkl_ota_data_process(TUYA_OTA_DATA_T *pack, uint32_t* remain_len);\n"})}),"\n",(0,r.jsx)(t.h4,{id:"functionality-2",children:"Functionality"}),"\n",(0,r.jsx)(t.p,{children:"Processes the received OTA data packet, this function will perform different upgrade operations according to the state."}),"\n",(0,r.jsx)(t.h4,{id:"parameters-2",children:"Parameters"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"pack"}),": Input parameter, a pointer to the OTA data packet."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"remain_len"}),": Output parameter, indicates the length of the remaining unprocessed data in the OTA data packet."]}),"\n"]}),"\n",(0,r.jsx)(t.h4,{id:"return-value-2",children:"Return Value"}),"\n",(0,r.jsxs)(t.p,{children:["If the data packet is processed successfully, the return value is ",(0,r.jsx)(t.code,{children:"OPRT_OK"}),", otherwise, an error code is returned. For specific error information, please see ",(0,r.jsx)(t.code,{children:"tuya_error_code.h"}),"."]}),"\n",(0,r.jsx)(t.h3,{id:"tkl_ota_end_notify",children:"tkl_ota_end_notify"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-c",children:"OPERATE_RET tkl_ota_end_notify(BOOL_T reset);\n"})}),"\n",(0,r.jsx)(t.h4,{id:"functionality-3",children:"Functionality"}),"\n",(0,r.jsx)(t.p,{children:"Notifies the end of the OTA upgrade, performs verification and follow-up processing, and will reset the device if necessary."}),"\n",(0,r.jsx)(t.h4,{id:"parameters-3",children:"Parameters"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"reset"}),": Input parameter, indicates whether the device needs to be reset after the OTA ends."]}),"\n"]}),"\n",(0,r.jsx)(t.h4,{id:"return-value-3",children:"Return Value"}),"\n",(0,r.jsxs)(t.p,{children:["A return value of ",(0,r.jsx)(t.code,{children:"OPRT_OK"})," indicates the operation was successful, if the verification fails or other reasons cause failure, an error code is returned. For error details, please refer to ",(0,r.jsx)(t.code,{children:"tuya_error_code.h"}),"."]}),"\n",(0,r.jsx)(t.h3,{id:"tkl_ota_get_old_firmware_info",children:"tkl_ota_get_old_firmware_info"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-c",children:"OPERATE_RET tkl_ota_get_old_firmware_info(TUYA_OTA_FIRMWARE_INFO_T **info);\n"})}),"\n",(0,r.jsx)(t.h4,{id:"functionality-4",children:"Functionality"}),"\n",(0,r.jsx)(t.p,{children:"Obtains information about the old firmware, this function is typically used in breakpoint resume scenarios."}),"\n",(0,r.jsx)(t.h4,{id:"parameters-4",children:"Parameters"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"info"}),": Output parameter, a pointer to a pointer to the old firmware information structure."]}),"\n"]}),"\n",(0,r.jsx)(t.h4,{id:"return-value-4",children:"Return Value"}),"\n",(0,r.jsxs)(t.p,{children:["If the old firmware information is successfully obtained, the return value is ",(0,r.jsx)(t.code,{children:"OPRT_OK"}),", otherwise, an error code is returned. For specific error information, please see ",(0,r.jsx)(t.code,{children:"tuya_error_code.h"}),"."]})]})}function u(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,t,i)=>{i.d(t,{R:()=>l,x:()=>s});var n=i(6540);const r={},a=n.createContext(r);function l(e){const t=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),n.createElement(a.Provider,{value:t},e.children)}}}]);