"use strict";(self.webpackChunkchaos_mesh_website=self.webpackChunkchaos_mesh_website||[]).push([[4103],{8453:(e,r,t)=>{t.d(r,{R:()=>l,x:()=>s});var n=t(6540);const i={},a=n.createContext(i);function l(e){const r=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function s(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),n.createElement(a.Provider,{value:r},e.children)}},9472:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>d,contentTitle:()=>s,default:()=>u,frontMatter:()=>l,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"tkl-api/tkl_thread","title":"Thread","description":"The file tkl_thread.c provides APIs for creating, terminating, and obtaining information about operating system threads (tasks) in a multi-tasking environment suitable for Tuya Smart devices. This file is automatically generated by the TuyaOS, with certain areas marked for developers to customize and implement relevant logic.","source":"@site/i18n/zh/docusaurus-plugin-content-docs/current/tkl-api/tkl_thread.md","sourceDirName":"tkl-api","slug":"/tkl-api/tkl_thread","permalink":"/website/zh/docs/tkl-api/tkl_thread","draft":false,"unlisted":false,"editUrl":"https://github.com/tuya/TuyaOpen/edit/master/i18n/zh/docusaurus-plugin-content-docs/current/tkl-api/tkl_thread.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"System Interface","permalink":"/website/zh/docs/tkl-api/tkl_system"},"next":{"title":"HW Timer Driver","permalink":"/website/zh/docs/tkl-api/tkl_timer"}}');var i=t(4848),a=t(8453);const l={},s="Thread",d={},c=[{value:"API Description",id:"api-description",level:2},{value:"tkl_thread_create",id:"tkl_thread_create",level:3},{value:"Function",id:"function",level:4},{value:"Parameters",id:"parameters",level:4},{value:"Return Value",id:"return-value",level:4},{value:"tkl_thread_release",id:"tkl_thread_release",level:3},{value:"Function",id:"function-1",level:4},{value:"Parameters",id:"parameters-1",level:4},{value:"Return Value",id:"return-value-1",level:4},{value:"tkl_thread_get_watermark",id:"tkl_thread_get_watermark",level:3},{value:"Function",id:"function-2",level:4},{value:"Parameters",id:"parameters-2",level:4},{value:"Return Value",id:"return-value-2",level:4},{value:"tkl_thread_get_id",id:"tkl_thread_get_id",level:3},{value:"Function",id:"function-3",level:4},{value:"Parameters",id:"parameters-3",level:4},{value:"Return Value",id:"return-value-3",level:4},{value:"tkl_thread_set_self_name",id:"tkl_thread_set_self_name",level:3},{value:"Function",id:"function-4",level:4},{value:"Parameters",id:"parameters-4",level:4},{value:"Return Value",id:"return-value-4",level:4},{value:"tkl_thread_is_self",id:"tkl_thread_is_self",level:3},{value:"Function",id:"function-5",level:4},{value:"Parameters",id:"parameters-5",level:4},{value:"Return Value",id:"return-value-5",level:4},{value:"tkl_thread_get_priority",id:"tkl_thread_get_priority",level:3},{value:"Function",id:"function-6",level:4},{value:"Parameters",id:"parameters-6",level:4},{value:"Return Value",id:"return-value-6",level:4},{value:"tkl_thread_set_priority",id:"tkl_thread_set_priority",level:3},{value:"Function",id:"function-7",level:4},{value:"Parameters",id:"parameters-7",level:4},{value:"Return Value",id:"return-value-7",level:4},{value:"tkl_thread_diagnose",id:"tkl_thread_diagnose",level:3},{value:"Function",id:"function-8",level:4},{value:"Parameters",id:"parameters-8",level:4},{value:"Return Value",id:"return-value-8",level:4}];function h(e){const r={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"thread",children:"Thread"})}),"\n",(0,i.jsxs)(r.p,{children:["The file ",(0,i.jsx)(r.code,{children:"tkl_thread.c"})," provides APIs for creating, terminating, and obtaining information about operating system threads (tasks) in a multi-tasking environment suitable for Tuya Smart devices. This file is automatically generated by the TuyaOS, with certain areas marked for developers to customize and implement relevant logic."]}),"\n",(0,i.jsx)(r.h2,{id:"api-description",children:"API Description"}),"\n",(0,i.jsx)(r.h3,{id:"tkl_thread_create",children:"tkl_thread_create"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-c",children:"OPERATE_RET tkl_thread_create(TKL_THREAD_HANDLE* thread,\n                              const char* name,\n                              uint32_t stack_size,\n                              uint32_t priority,\n                              const THREAD_FUNC_T func,\n                              void* const arg);\n"})}),"\n",(0,i.jsx)(r.h4,{id:"function",children:"Function"}),"\n",(0,i.jsx)(r.p,{children:"Creates a task thread."}),"\n",(0,i.jsx)(r.h4,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"thread"}),": Output parameter used to return the handle of the created thread."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"name"}),": Name of the thread."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"stack_size"}),": Stack size of the thread."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"priority"}),": Priority of the thread."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"func"}),": Function pointer that the thread will execute."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"arg"}),": Argument passed to the thread function."]}),"\n"]}),"\n",(0,i.jsx)(r.h4,{id:"return-value",children:"Return Value"}),"\n",(0,i.jsxs)(r.p,{children:["A return value of ",(0,i.jsx)(r.code,{children:"OPRT_OK"})," indicates that the thread was successfully created, while other values indicate an error. Refer to ",(0,i.jsx)(r.code,{children:"tuya_error_code.h"})," for specific error codes."]}),"\n",(0,i.jsx)(r.h3,{id:"tkl_thread_release",children:"tkl_thread_release"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-c",children:"OPERATE_RET tkl_thread_release(const TKL_THREAD_HANDLE thread);\n"})}),"\n",(0,i.jsx)(r.h4,{id:"function-1",children:"Function"}),"\n",(0,i.jsx)(r.p,{children:"Terminates a thread and releases its resources."}),"\n",(0,i.jsx)(r.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"thread"}),": Handle of the thread to be terminated."]}),"\n"]}),"\n",(0,i.jsx)(r.h4,{id:"return-value-1",children:"Return Value"}),"\n",(0,i.jsxs)(r.p,{children:["A return value of ",(0,i.jsx)(r.code,{children:"OPRT_OK"})," indicates success, while other values indicate an error. Refer to ",(0,i.jsx)(r.code,{children:"tuya_error_code.h"})," for detailed information."]}),"\n",(0,i.jsx)(r.h3,{id:"tkl_thread_get_watermark",children:"tkl_thread_get_watermark"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-c",children:"OPERATE_RET tkl_thread_get_watermark(const TKL_THREAD_HANDLE thread, uint32_t* watermark);\n"})}),"\n",(0,i.jsx)(r.h4,{id:"function-2",children:"Function"}),"\n",(0,i.jsx)(r.p,{children:"Obtains the highest water mark (minimum remaining stack space) of the thread stack."}),"\n",(0,i.jsx)(r.h4,{id:"parameters-2",children:"Parameters"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"thread"}),": Thread handle."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"watermark"}),": Output parameter, the highest water mark in bytes."]}),"\n"]}),"\n",(0,i.jsx)(r.h4,{id:"return-value-2",children:"Return Value"}),"\n",(0,i.jsxs)(r.p,{children:["A return value of ",(0,i.jsx)(r.code,{children:"OPRT_OK"})," indicates success, while other values indicate failure."]}),"\n",(0,i.jsx)(r.h3,{id:"tkl_thread_get_id",children:"tkl_thread_get_id"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-c",children:"OPERATE_RET tkl_thread_get_id(TKL_THREAD_HANDLE *thread);\n"})}),"\n",(0,i.jsx)(r.h4,{id:"function-3",children:"Function"}),"\n",(0,i.jsx)(r.p,{children:"Obtains the handle of the current thread."}),"\n",(0,i.jsx)(r.h4,{id:"parameters-3",children:"Parameters"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"thread"}),": Output parameter, handle of the current thread."]}),"\n"]}),"\n",(0,i.jsx)(r.h4,{id:"return-value-3",children:"Return Value"}),"\n",(0,i.jsxs)(r.p,{children:["Always returns ",(0,i.jsx)(r.code,{children:"OPRT_OK"}),", indicating a successful call."]}),"\n",(0,i.jsx)(r.h3,{id:"tkl_thread_set_self_name",children:"tkl_thread_set_self_name"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-c",children:"OPERATE_RET tkl_thread_set_self_name(const char* name);\n"})}),"\n",(0,i.jsx)(r.h4,{id:"function-4",children:"Function"}),"\n",(0,i.jsx)(r.p,{children:"Sets the name of the current thread."}),"\n",(0,i.jsx)(r.h4,{id:"parameters-4",children:"Parameters"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"name"}),": New name of the thread."]}),"\n"]}),"\n",(0,i.jsx)(r.h4,{id:"return-value-4",children:"Return Value"}),"\n",(0,i.jsxs)(r.p,{children:["A return value of ",(0,i.jsx)(r.code,{children:"OPRT_OK"})," indicates success, while other values indicate an error."]}),"\n",(0,i.jsx)(r.h3,{id:"tkl_thread_is_self",children:"tkl_thread_is_self"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-c",children:"OPERATE_RET tkl_thread_is_self(TKL_THREAD_HANDLE thread, BOOL_T* is_self);\n"})}),"\n",(0,i.jsx)(r.h4,{id:"function-5",children:"Function"}),"\n",(0,i.jsx)(r.p,{children:"Determines if the specified thread is the current thread."}),"\n",(0,i.jsx)(r.h4,{id:"parameters-5",children:"Parameters"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"thread"}),": Thread handle."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"is_self"}),": Output parameter, indicates whether it is the current thread."]}),"\n"]}),"\n",(0,i.jsx)(r.h4,{id:"return-value-5",children:"Return Value"}),"\n",(0,i.jsxs)(r.p,{children:["A return value of ",(0,i.jsx)(r.code,{children:"OPRT_OK"})," indicates success, while other values indicate failure."]}),"\n",(0,i.jsx)(r.h3,{id:"tkl_thread_get_priority",children:"tkl_thread_get_priority"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-c",children:"OPERATE_RET tkl_thread_get_priority(TKL_THREAD_HANDLE thread, int *priority);\n"})}),"\n",(0,i.jsx)(r.h4,{id:"function-6",children:"Function"}),"\n",(0,i.jsx)(r.p,{children:"Obtains the priority of a thread."}),"\n",(0,i.jsx)(r.h4,{id:"parameters-6",children:"Parameters"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"thread"}),": Thread handle. If NULL, it indicates obtaining the priority of the current thread."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"priority"}),": Output parameter, used to return the thread priority."]}),"\n"]}),"\n",(0,i.jsx)(r.h4,{id:"return-value-6",children:"Return Value"}),"\n",(0,i.jsxs)(r.p,{children:["A return value of ",(0,i.jsx)(r.code,{children:"OPRT_OK"})," indicates success, while other values indicate failure."]}),"\n",(0,i.jsx)(r.h3,{id:"tkl_thread_set_priority",children:"tkl_thread_set_priority"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-c",children:"OPERATE_RET tkl_thread_set_priority(TKL_THREAD_HANDLE thread, int priority);\n"})}),"\n",(0,i.jsx)(r.h4,{id:"function-7",children:"Function"}),"\n",(0,i.jsx)(r.p,{children:"Sets the priority of a thread."}),"\n",(0,i.jsx)(r.h4,{id:"parameters-7",children:"Parameters"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"thread"}),": Thread handle. If NULL, it indicates setting the priority of the current thread."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"priority"}),": New priority of the thread."]}),"\n"]}),"\n",(0,i.jsx)(r.h4,{id:"return-value-7",children:"Return Value"}),"\n",(0,i.jsxs)(r.p,{children:["A return value of ",(0,i.jsx)(r.code,{children:"OPRT_OK"})," indicates success, while other values indicate failure."]}),"\n",(0,i.jsx)(r.h3,{id:"tkl_thread_diagnose",children:"tkl_thread_diagnose"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-c",children:"OPERATE_RET tkl_thread_diagnose(TKL_THREAD_HANDLE thread);\n"})}),"\n",(0,i.jsx)(r.h4,{id:"function-8",children:"Function"}),"\n",(0,i.jsx)(r.p,{children:"Diagnoses a thread, such as printing task stack information."}),"\n",(0,i.jsx)(r.h4,{id:"parameters-8",children:"Parameters"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"thread"}),": Thread handle."]}),"\n"]}),"\n",(0,i.jsx)(r.h4,{id:"return-value-8",children:"Return Value"}),"\n",(0,i.jsxs)(r.p,{children:["A return value of ",(0,i.jsx)(r.code,{children:"OPRT_OK"})," indicates a successful diagnosis."]})]})}function u(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}}}]);