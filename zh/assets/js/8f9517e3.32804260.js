"use strict";(self.webpackChunkchaos_mesh_website=self.webpackChunkchaos_mesh_website||[]).push([[7627],{1609:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>t,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"esp32-extra","title":"ESP32 Extended Information","description":"Overview","source":"@site/content/hardware/esp32-extra.mdx","sourceDirName":".","slug":"/esp32-extra","permalink":"/zh/hardware-content/esp32-extra","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}}');var r=i(4848),l=i(8453);const o={},t="ESP32 Extended Information",d={},a=[{value:"Overview",id:"overview",level:2},{value:"Key Specifications",id:"key-specifications",level:2},{value:"Common Module Variants",id:"common-module-variants",level:2},{value:"ESP32-WROOM-32",id:"esp32-wroom-32",level:3},{value:"ESP32-WROVER",id:"esp32-wrover",level:3},{value:"ESP32 DevKit",id:"esp32-devkit",level:3},{value:"Getting Started",id:"getting-started",level:2},{value:"Setting Up the Arduino IDE",id:"setting-up-the-arduino-ide",level:3},{value:"Basic Code Example: Blinking LED",id:"basic-code-example-blinking-led",level:3},{value:"WiFi Connection Example",id:"wifi-connection-example",level:3},{value:"Power Considerations",id:"power-considerations",level:2},{value:"Common Applications",id:"common-applications",level:2},{value:"Resources and Further Reading",id:"resources-and-further-reading",level:2},{value:"Overview",id:"overview-1",level:2},{value:"Key Specifications",id:"key-specifications-1",level:2},{value:"Common Module Variants",id:"common-module-variants-1",level:2},{value:"ESP32-WROOM-32",id:"esp32-wroom-32-1",level:3},{value:"ESP32-WROVER",id:"esp32-wrover-1",level:3},{value:"ESP32 DevKit",id:"esp32-devkit-1",level:3},{value:"Getting Started",id:"getting-started-1",level:2},{value:"Setting Up the Arduino IDE",id:"setting-up-the-arduino-ide-1",level:3},{value:"Basic Code Example: Blinking LED",id:"basic-code-example-blinking-led-1",level:3},{value:"WiFi Connection Example",id:"wifi-connection-example-1",level:3},{value:"Power Considerations",id:"power-considerations-1",level:2},{value:"Common Applications",id:"common-applications-1",level:2},{value:"Resources and Further Reading",id:"resources-and-further-reading-1",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"esp32-extended-information",children:"ESP32 Extended Information"})}),"\n",(0,r.jsx)(n.h1,{id:"esp32-extended-information-1",children:"ESP32 Extended Information"}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:"The ESP32 is a powerful, dual-core microcontroller with integrated Wi-Fi and Bluetooth capabilities developed by Espressif Systems. It's designed for IoT applications, wearables, and other projects requiring wireless connectivity combined with significant processing power."}),"\n",(0,r.jsx)(n.h2,{id:"key-specifications",children:"Key Specifications"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Processor"}),": Dual-core Tensilica Xtensa LX6 microprocessor (up to 240MHz)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Memory"}),": 520KB SRAM, 448KB ROM"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Wireless"}),": 2.4 GHz Wi-Fi (802.11 b/g/n) and Bluetooth 4.2 (Classic and BLE)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"GPIO"}),": 34 programmable GPIO pins"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"ADC"}),": 12-bit SAR ADC with up to 18 channels"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"DAC"}),": Two 8-bit DAC outputs"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Other Peripherals"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"10 capacitive touch sensors"}),"\n",(0,r.jsx)(n.li,{children:"Temperature sensor"}),"\n",(0,r.jsx)(n.li,{children:"Hall effect sensor"}),"\n",(0,r.jsx)(n.li,{children:"4 SPI interfaces"}),"\n",(0,r.jsx)(n.li,{children:"2 I\xb2S interfaces"}),"\n",(0,r.jsx)(n.li,{children:"2 I\xb2C interfaces"}),"\n",(0,r.jsx)(n.li,{children:"3 UART interfaces"}),"\n",(0,r.jsx)(n.li,{children:"CAN 2.0 interface"}),"\n",(0,r.jsx)(n.li,{children:"Ethernet MAC interface"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"common-module-variants",children:"Common Module Variants"}),"\n",(0,r.jsx)(n.h3,{id:"esp32-wroom-32",children:"ESP32-WROOM-32"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Most common module format"}),"\n",(0,r.jsx)(n.li,{children:"PCB antenna"}),"\n",(0,r.jsx)(n.li,{children:"4MB flash memory"}),"\n",(0,r.jsx)(n.li,{children:"Compact form factor"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"esp32-wrover",children:"ESP32-WROVER"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Similar to WROOM but includes additional PSRAM"}),"\n",(0,r.jsx)(n.li,{children:"Better for applications requiring more memory"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"esp32-devkit",children:"ESP32 DevKit"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Development board with USB interface"}),"\n",(0,r.jsx)(n.li,{children:"Easy prototyping with breadboard-friendly pin layout"}),"\n",(0,r.jsx)(n.li,{children:"Built-in voltage regulator and USB-to-UART bridge"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"getting-started",children:"Getting Started"}),"\n",(0,r.jsx)(n.h3,{id:"setting-up-the-arduino-ide",children:"Setting Up the Arduino IDE"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Install the Arduino IDE from ",(0,r.jsx)(n.a,{href:"https://www.arduino.cc/en/software",children:"arduino.cc"})]}),"\n",(0,r.jsxs)(n.li,{children:["Add ESP32 board support:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Go to File > Preferences"}),"\n",(0,r.jsxs)(n.li,{children:['Add this URL to the "Additional Boards Manager URLs" field:',"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json\n"})}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:"Go to Tools > Board > Boards Manager"}),"\n",(0,r.jsx)(n.li,{children:'Search for "ESP32" and install the package'}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"basic-code-example-blinking-led",children:"Basic Code Example: Blinking LED"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'// Simple blink example for ESP32\n\nconst int ledPin = 2;  // Most ESP32 boards have an onboard LED at GPIO2\n\nvoid setup() {\n  pinMode(ledPin, OUTPUT);\n  Serial.begin(115200);\n  Serial.println("ESP32 Blink Test");\n}\n\nvoid loop() {\n  digitalWrite(ledPin, HIGH);  // Turn on the LED\n  Serial.println("LED ON");\n  delay(1000);                 // Wait for 1 second\n  \n  digitalWrite(ledPin, LOW);   // Turn off the LED\n  Serial.println("LED OFF");\n  delay(1000);                 // Wait for 1 second\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"wifi-connection-example",children:"WiFi Connection Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'#include <WiFi.h>\n\nconst char* ssid = "YourWiFiName";\nconst char* password = "YourWiFiPassword";\n\nvoid setup() {\n  Serial.begin(115200);\n  delay(1000);\n  \n  Serial.println("Connecting to WiFi...");\n  WiFi.begin(ssid, password);\n  \n  while (WiFi.status() != WL_CONNECTED) {\n    delay(500);\n    Serial.print(".");\n  }\n  \n  Serial.println("");\n  Serial.println("WiFi connected");\n  Serial.print("IP address: ");\n  Serial.println(WiFi.localIP());\n}\n\nvoid loop() {\n  // Your code here\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"power-considerations",children:"Power Considerations"}),"\n",(0,r.jsx)(n.p,{children:"The ESP32 can operate in several power modes:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Active Mode"}),": Full functionality, ~240mA current draw"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Modem Sleep"}),": CPU operational, Wi-Fi/BT disabled between DTIM intervals, ~20mA"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Light Sleep"}),": CPU paused, memory maintained, ~800\u03bcA"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Deep Sleep"}),": Only ULP coprocessor and RTC active, ~10\u03bcA"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"For battery-powered applications, implementing deep sleep is essential:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'#define uS_TO_S_FACTOR 1000000  // Conversion factor for micro seconds to seconds\n#define TIME_TO_SLEEP  5        // Time ESP32 will go to sleep (in seconds)\n\nvoid setup() {\n  Serial.begin(115200);\n  Serial.println("Going to sleep for " + String(TIME_TO_SLEEP) + " seconds");\n  \n  esp_sleep_enable_timer_wakeup(TIME_TO_SLEEP * uS_TO_S_FACTOR);\n  esp_deep_sleep_start();\n}\n\nvoid loop() {\n  // This is not used in deep sleep examples\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"common-applications",children:"Common Applications"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Home Automation"}),": Smart switches, sensors, and controllers"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Industrial IoT"}),": Remote monitoring and control systems"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Wearable Electronics"}),": Fitness trackers and smart watches"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Environmental Monitoring"}),": Weather stations and air quality monitors"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Audio Applications"}),": Bluetooth speakers and voice assistants"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"resources-and-further-reading",children:"Resources and Further Reading"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://docs.espressif.com/projects/esp-idf/en/latest/esp32/",children:"Espressif Official Documentation"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://www.espressif.com/sites/default/files/documentation/esp32_technical_reference_manual_en.pdf",children:"ESP32 Technical Reference Manual"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://www.espressif.com/sites/default/files/documentation/esp32_datasheet_en.pdf",children:"ESP32 Datasheet"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/espressif/arduino-esp32",children:"ESP32 Arduino Core GitHub Repository"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://docs.espressif.com/projects/esp-idf/en/latest/esp32/",children:"ESP-IDF Programming Guide"})}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"overview-1",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:"The ESP32 is a powerful, dual-core microcontroller with integrated Wi-Fi and Bluetooth capabilities developed by Espressif Systems. It's designed for IoT applications, wearables, and other projects requiring wireless connectivity combined with significant processing power."}),"\n",(0,r.jsx)(n.h2,{id:"key-specifications-1",children:"Key Specifications"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Processor"}),": Dual-core Tensilica Xtensa LX6 microprocessor (up to 240MHz)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Memory"}),": 520KB SRAM, 448KB ROM"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Wireless"}),": 2.4 GHz Wi-Fi (802.11 b/g/n) and Bluetooth 4.2 (Classic and BLE)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"GPIO"}),": 34 programmable GPIO pins"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"ADC"}),": 12-bit SAR ADC with up to 18 channels"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"DAC"}),": Two 8-bit DAC outputs"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Other Peripherals"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"10 capacitive touch sensors"}),"\n",(0,r.jsx)(n.li,{children:"Temperature sensor"}),"\n",(0,r.jsx)(n.li,{children:"Hall effect sensor"}),"\n",(0,r.jsx)(n.li,{children:"4 SPI interfaces"}),"\n",(0,r.jsx)(n.li,{children:"2 I\xb2S interfaces"}),"\n",(0,r.jsx)(n.li,{children:"2 I\xb2C interfaces"}),"\n",(0,r.jsx)(n.li,{children:"3 UART interfaces"}),"\n",(0,r.jsx)(n.li,{children:"CAN 2.0 interface"}),"\n",(0,r.jsx)(n.li,{children:"Ethernet MAC interface"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"common-module-variants-1",children:"Common Module Variants"}),"\n",(0,r.jsx)(n.h3,{id:"esp32-wroom-32-1",children:"ESP32-WROOM-32"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Most common module format"}),"\n",(0,r.jsx)(n.li,{children:"PCB antenna"}),"\n",(0,r.jsx)(n.li,{children:"4MB flash memory"}),"\n",(0,r.jsx)(n.li,{children:"Compact form factor"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"esp32-wrover-1",children:"ESP32-WROVER"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Similar to WROOM but includes additional PSRAM"}),"\n",(0,r.jsx)(n.li,{children:"Better for applications requiring more memory"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"esp32-devkit-1",children:"ESP32 DevKit"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Development board with USB interface"}),"\n",(0,r.jsx)(n.li,{children:"Easy prototyping with breadboard-friendly pin layout"}),"\n",(0,r.jsx)(n.li,{children:"Built-in voltage regulator and USB-to-UART bridge"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"getting-started-1",children:"Getting Started"}),"\n",(0,r.jsx)(n.h3,{id:"setting-up-the-arduino-ide-1",children:"Setting Up the Arduino IDE"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Install the Arduino IDE from ",(0,r.jsx)(n.a,{href:"https://www.arduino.cc/en/software",children:"arduino.cc"})]}),"\n",(0,r.jsxs)(n.li,{children:["Add ESP32 board support:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Go to File > Preferences"}),"\n",(0,r.jsxs)(n.li,{children:['Add this URL to the "Additional Boards Manager URLs" field:',"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json\n"})}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:"Go to Tools > Board > Boards Manager"}),"\n",(0,r.jsx)(n.li,{children:'Search for "ESP32" and install the package'}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"basic-code-example-blinking-led-1",children:"Basic Code Example: Blinking LED"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'// Simple blink example for ESP32\n\nconst int ledPin = 2;  // Most ESP32 boards have an onboard LED at GPIO2\n\nvoid setup() {\n  pinMode(ledPin, OUTPUT);\n  Serial.begin(115200);\n  Serial.println("ESP32 Blink Test");\n}\n\nvoid loop() {\n  digitalWrite(ledPin, HIGH);  // Turn on the LED\n  Serial.println("LED ON");\n  delay(1000);                 // Wait for 1 second\n  \n  digitalWrite(ledPin, LOW);   // Turn off the LED\n  Serial.println("LED OFF");\n  delay(1000);                 // Wait for 1 second\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"wifi-connection-example-1",children:"WiFi Connection Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'#include <WiFi.h>\n\nconst char* ssid = "YourWiFiName";\nconst char* password = "YourWiFiPassword";\n\nvoid setup() {\n  Serial.begin(115200);\n  delay(1000);\n  \n  Serial.println("Connecting to WiFi...");\n  WiFi.begin(ssid, password);\n  \n  while (WiFi.status() != WL_CONNECTED) {\n    delay(500);\n    Serial.print(".");\n  }\n  \n  Serial.println("");\n  Serial.println("WiFi connected");\n  Serial.print("IP address: ");\n  Serial.println(WiFi.localIP());\n}\n\nvoid loop() {\n  // Your code here\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"power-considerations-1",children:"Power Considerations"}),"\n",(0,r.jsx)(n.p,{children:"The ESP32 can operate in several power modes:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Active Mode"}),": Full functionality, ~240mA current draw"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Modem Sleep"}),": CPU operational, Wi-Fi/BT disabled between DTIM intervals, ~20mA"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Light Sleep"}),": CPU paused, memory maintained, ~800\u03bcA"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Deep Sleep"}),": Only ULP coprocessor and RTC active, ~10\u03bcA"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"For battery-powered applications, implementing deep sleep is essential:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'#define uS_TO_S_FACTOR 1000000  // Conversion factor for micro seconds to seconds\n#define TIME_TO_SLEEP  5        // Time ESP32 will go to sleep (in seconds)\n\nvoid setup() {\n  Serial.begin(115200);\n  Serial.println("Going to sleep for " + String(TIME_TO_SLEEP) + " seconds");\n  \n  esp_sleep_enable_timer_wakeup(TIME_TO_SLEEP * uS_TO_S_FACTOR);\n  esp_deep_sleep_start();\n}\n\nvoid loop() {\n  // This is not used in deep sleep examples\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"common-applications-1",children:"Common Applications"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Home Automation"}),": Smart switches, sensors, and controllers"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Industrial IoT"}),": Remote monitoring and control systems"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Wearable Electronics"}),": Fitness trackers and smart watches"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Environmental Monitoring"}),": Weather stations and air quality monitors"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Audio Applications"}),": Bluetooth speakers and voice assistants"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"resources-and-further-reading-1",children:"Resources and Further Reading"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://docs.espressif.com/projects/esp-idf/en/latest/esp32/",children:"Espressif Official Documentation"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://www.espressif.com/sites/default/files/documentation/esp32_technical_reference_manual_en.pdf",children:"ESP32 Technical Reference Manual"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://www.espressif.com/sites/default/files/documentation/esp32_datasheet_en.pdf",children:"ESP32 Datasheet"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/espressif/arduino-esp32",children:"ESP32 Arduino Core GitHub Repository"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://docs.espressif.com/projects/esp-idf/en/latest/esp32/",children:"ESP-IDF Programming Guide"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>t});var s=i(6540);const r={},l=s.createContext(r);function o(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);